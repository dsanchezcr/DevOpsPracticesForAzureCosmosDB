name: 'DevOps Practices for Azure Cosmos DB'
on:
    workflow_dispatch:
    push:
        branches:
        - main
    pull_request:
        branches:
        - main

jobs:
  Build:
    name: 'Build .NET Web App'
    runs-on: ubuntu-latest
    steps:
      - name: Repository checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: .NET Restore
        run: dotnet restore SampleApp/WebApp.csproj

      - name: .NET Build
        run: dotnet build SampleApp/WebApp.csproj --configuration Release --no-restore

      - name: .NET Publish
        run: dotnet publish SampleApp/WebApp.csproj --configuration Release --no-build --no-restore --output ./publish

      - name: Upload web app artifact
        uses: actions/upload-artifact@v3
        with:
          name: SampleApp
          path: publish

  Testing:
    name: 'Testing with Cosmos DB Emulator'
    runs-on: windows-latest # Azure Cosmos DB Emulator only supports Windows, although you can run it in a Docker container. https://learn.microsoft.com/azure/cosmos-db/local-emulator#run-on-linux-macos
    steps:
    - name: Repository checkout
      uses: actions/checkout@v4

    - name: Initialize Azure Cosmos DB Emulator
      shell: pwsh
      run: | # Code from https://learn.microsoft.com/azure/cosmos-db/tutorial-setup-ci-cd
        dir "C:\Program Files\Azure Cosmos DB Emulator\"      
        Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"      
        $startEmulatorCmd = "Start-CosmosDbEmulator -NoFirewall -NoUI"
        Write-Host $startEmulatorCmd
        Invoke-Expression -Command $startEmulatorCmd
    
        $Emulator = Get-Item "$env:ProgramFiles\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe"
        $IPAddress = Get-NetIPAddress -AddressFamily IPV4 -AddressState Preferred -PrefixOrigin Manual | Select-Object IPAddress
        
        New-Object PSObject @{
            Emulator = $Emulator.BaseName
            Version = $Emulator.VersionInfo.ProductVersion
            Endpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "https://${_}:8081/" }
            MongoDBEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "mongodb://${_}:10255/" }
            CassandraEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "tcp://${_}:10350/" }
            GremlinEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "http://${_}:8901/" }
            TableEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "https://${_}:8902/" }
            IPAddress = $IPAddress.IPAddress
        }
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest

    - name: Disable TLS certificate validation # Disable TLS certificate validation for the emulator
      uses: actions/github-script@v6
      with:
        script: | 
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

    - name: Install Azure Cosmos dependency
      run: npm install @azure/cosmos
    
    # The following steps are optional and are only used to demonstrate how to create and test Stored Procedures and Triggers with the Azure Cosmos DB Emulator.
    - name: Create and test Stored Procedure with Azure Cosmos DB Emulator
      run: node StoredProcedures/createSP.js https://localhost:8081 C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw== SampleDatabase WebAppContext SampleStoredProcedure.js 1

    - name: Create and test Trigger with Azure Cosmos DB Emulator
      run: node Triggers/createTrigger.js https://localhost:8081 C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw== SampleDatabase WebAppContext SampleTrigger.js 1

  QA:
    name: 'Quality Assurance in Azure Test Environment'
    runs-on: ubuntu-latest
    environment: QA
    needs: [Build]
    steps:
        - name: Repository checkout
          uses: actions/checkout@v4

        - uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }} # Generated with the following Azure CLI command: az ad sp create-for-rbac --name "myApp" --role owner --scopes /subscriptions/{subscription-id} --json-auth

        - name: Create Azure Resource Group
          run: | 
            az group create --name ${{ vars.RESOURCEGROUP }} --location eastus

        - name: Provisioning Azure resources
          id: arm_deploy
          uses: azure/arm-deploy@v1
          with:
            resourceGroupName: ${{ vars.RESOURCEGROUP }}
            template: IaC/cosmosdb.json
            parameters: IaC/cosmosdb.QA-parameters.json
            deploymentMode: 'Complete'

        - name: Get CosmosDB Key
          id: get_cosmos_key
          run: | # Mask the key in the logs
            primary_key=$(az cosmosdb keys list --name ${{ steps.arm_deploy.outputs.cosmosDBName }} --resource-group ${{ vars.RESOURCEGROUP }} --query primaryMasterKey --output tsv)
            echo "::add-mask::$primary_key" 
            echo "cosmosDBKey=$primary_key" >> $GITHUB_ENV

        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: latest

        - name: Install Azure Cosmos dependency 
          run: npm install @azure/cosmos
    
        - name: Create and test Stored Procedure with Azure Cosmos DB
          run: node StoredProcedures/createSP.js ${{ steps.arm_deploy.outputs.cosmosDBendpoint }} ${{ env.cosmosDBKey }} SampleDatabase WebAppContext SampleStoredProcedure.js 1
      
        - name: Create and test Trigger with Azure Cosmos DB
          run: node Triggers/createTrigger.js ${{ steps.arm_deploy.outputs.cosmosDBendpoint }} ${{ env.cosmosDBKey }} SampleDatabase WebAppContext SampleTrigger.js 1
              
        - name: Download web app artifact
          uses: actions/download-artifact@v3
          with:
            name: SampleApp
            path: SampleApp

        - name: Deploy web app to Azure Web App
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ steps.arm_deploy.outputs.webAppName }}
            package: SampleApp

  Production:
    name: 'Production Deployment'
    runs-on: ubuntu-latest
    environment: Production
    needs: QA
    steps:
        - name: Repository checkout
          uses: actions/checkout@v4

        - uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }} # For production, it is recommended to use a Service Principal with the least privileges possible that only has access to the production environment.

        - name: Create Azure Resource Group
          run: |
            az group create --name ${{ vars.RESOURCEGROUP }} --location eastus

        - name: Provisioning Azure Cosmos DB resource with ARM
          id: arm_deploy
          uses: azure/arm-deploy@v1
          with:
            resourceGroupName: ${{ vars.RESOURCEGROUP }}
            template: IaC/cosmosdb.json
            parameters: IaC/cosmosdb.Prod-parameters.json
            deploymentMode: 'Incremental'
            
        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: latest
      
        - name: Get CosmosDB Key
          id: get_cosmos_key
          run: | # Mask the key in the logs
            primary_key=$(az cosmosdb keys list --name ${{ steps.arm_deploy.outputs.cosmosDBName }} --resource-group ${{ vars.RESOURCEGROUP }} --query primaryMasterKey --output tsv)
            echo "::add-mask::$primary_key"
            echo "cosmosDBKey=$primary_key" >> $GITHUB_ENV
  
        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: latest

        - name: Install Azure Cosmos dependency 
          run: npm install @azure/cosmos
      
        - name: Create and test Stored Procedure with Azure Cosmos DB
          run: node StoredProcedures/createSP.js ${{ steps.arm_deploy.outputs.cosmosDBendpoint }} ${{ env.cosmosDBKey }} SampleDatabase WebAppContext SampleStoredProcedure.js 0
      
        - name: Create and test Trigger with Azure Cosmos DB
          run: node Triggers/createTrigger.js ${{ steps.arm_deploy.outputs.cosmosDBendpoint }} ${{ env.cosmosDBKey }} SampleDatabase WebAppContext SampleTrigger.js 0
          
        - name: Download web app artifact
          uses: actions/download-artifact@v3
          with:
            name: SampleApp
            path: SampleApp

        - name: Deploy web app to Azure Web App
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ steps.arm_deploy.outputs.WebAppName }}
            package: SampleApp