name: 'DevOps Practices for Azure Cosmos DB - GitHub Actions Workflow'
on:
    workflow_dispatch:
    push:
        branches:
        - main
    pull_request:
        branches:
        - main

jobs:
  Development:
    name: 'Deploy and Testing in Development'
    runs-on: windows-latest # Azure Cosmos DB Emulator only supports Windows, although you can run it in a Docker container. https://learn.microsoft.com/azure/cosmos-db/local-emulator#run-on-linux-macos
    environment: Development
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Initialize Azure Cosmos DB Emulator
      shell: pwsh
      run: | # Code from https://learn.microsoft.com/azure/cosmos-db/tutorial-setup-ci-cd
        dir "C:\Program Files\Azure Cosmos DB Emulator\"      
        Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"      
        $startEmulatorCmd = "Start-CosmosDbEmulator -NoFirewall -NoUI"
        Write-Host $startEmulatorCmd
        Invoke-Expression -Command $startEmulatorCmd
    
        $Emulator = Get-Item "$env:ProgramFiles\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe"
        $IPAddress = Get-NetIPAddress -AddressFamily IPV4 -AddressState Preferred -PrefixOrigin Manual | Select-Object IPAddress
        
        New-Object PSObject @{
            Emulator = $Emulator.BaseName
            Version = $Emulator.VersionInfo.ProductVersion
            Endpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "https://${_}:8081/" }
            MongoDBEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "mongodb://${_}:10255/" }
            CassandraEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "tcp://${_}:10350/" }
            GremlinEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "http://${_}:8901/" }
            TableEndpoint = @($(hostname), $IPAddress.IPAddress) | ForEach-Object { "https://${_}:8902/" }
            IPAddress = $IPAddress.IPAddress
        }
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest
    - name: Install NPM Azure Cosmos dependency
      run: npm install @azure/cosmos
    - name: Create and test Stored Procedure with Azure Cosmos DB Emulator
      uses: actions/github-script@v6
      with:
        script: | # This is the default connection string for the Azure Cosmos DB Emulator and TLS Reject is disabled for the emulator self-certificate.
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
            async function createSP() {       
                const { CosmosClient } = require("@azure/cosmos");
                const endpoint = "https://localhost:8081";
                const key = "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
                const client = new CosmosClient({ endpoint, key });    
                const { database } =  await client.databases.createIfNotExists({ id: 'SampleDatabase' });
                const { container } =  await database.containers.createIfNotExists({ id: 'SampleContainer' });
                const { sampleStoredProcedure } = require('./StoredProcedures/SampleStoredProcedure.js');    
                try {
                    await container.scripts.storedProcedures.create(sampleStoredProcedure)              
                } catch (e) {
                    if (e.code === 409) {
                        console.log('Stored procedure already exists replacing it with new version.')
                        await container.scripts.storedProcedure(sampleStoredProcedure.id).replace(sampleStoredProcedure) 
                    } else {
                        throw(e)
                    }
                }
                finally{
                    const { resource: results } = await container.scripts.storedProcedure(sampleStoredProcedure.id).execute();
                    console.log(results);  
                }
            }
            createSP().catch(error => {
              console.error("An error occurred: ", error);
            });

    - name: Create and test Trigger
      uses: actions/github-script@v6
      with:
        script: | # This is the default connection string for the Azure Cosmos DB Emulator and TLS Reject is disabled for the emulator self-certificate.
            process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
            async function createTrigger() {
                const { CosmosClient } = require("@azure/cosmos");
                const endpoint = "https://localhost:8081";
                const key = "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==";
                const client = new CosmosClient({ endpoint, key });    
                const { database } =  await client.databases.createIfNotExists({ id: 'SampleDatabase' });
                const { container } =  await database.containers.createIfNotExists({ id: 'SampleContainer' });
                const { sampleTrigger } = require('./SampleTrigger.js')
                try {
                    await container.scripts.triggers.create(sampleTrigger)              
                } catch (e) {
                    if (e.code === 409) {
                        console.log('Trigger already exists replacing it with new version.')
                        await container.scripts.trigger(sampleTrigger.id).replace(sampleTrigger) 
                    } else {
                        throw(e)
                    }
                }
                finally {
                    const newItem = {
                        id: Math.floor(Math.random() * 10000).toString(),
                        name: 'Sample Item'
                    };
                    const options = { preTriggerInclude: ['SampleTrigger'] };
                    const { resource: trigger_result } = await container.items.create(newItem, options)
                    console.log(trigger_result) 
                }    
            }
            createTrigger().catch(error => {
                console.error("An error occurred: ", error);
            });

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install dependencies
      run: |
        pushd ./SampleApp
        dotnet restore 

    - name: Build
      run: dotnet build SampleApp/SampleApp.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test SampleApp/SampleApp.sln --no-restore --verbosity normal

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results
        path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Publish
      run: dotnet publish SampleApp/SampleApp.sln --configuration Release --no-build --no-restore --output ./publish

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: SampleApp
        path: publish

  QA:
    name: 'Deploy and Testing in QA'
    runs-on: ubuntu-latest
    environment: QA
    needs: Development
    steps:
        - name: Checkout
          uses: actions/checkout@v4

        - uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }} # Generated with the following Azure CLI command: az ad sp create-for-rbac --name "myApp" --role owner --scopes /subscriptions/{subscription-id} --json-auth

        - name: Provisioning Azure Cosmos DB resource with ARM
          id: arm_deployment
          uses: azure/arm-deploy@v1
          with:
            resourceGroupName: azurecosmosdb-QA-rg
            template: IaC/cosmosdb.json
            parameters: IaC/cosmosdb.QA-parameters.json
            deploymentMode: 'Complete'

        - name: Create and test Stored Procedure with Azure Cosmos DB
          uses: actions/github-script@v6
          with:
            script: | 
              npm install @azure/cosmos
              npm install @azure/identity
              const { DefaultAzureCredential } = require("@azure/identity");
              const credential = new DefaultAzureCredential();
              const cosmosClient = new CosmosClient({ 
                  ${{ steps.arm_deployment.outputs.cosmosDBendpoint }}, 
                  aadCredentials: credential
              });
              const sampleSP = require('StoredProcedures/SampleStoredProcedure.js')
              const { database } = await cosmosClient.databases.createIfNotExists({ id: 'SampleDatabase' })
              const { container } = await database.containers.createIfNotExists({ id: 'SampleContainer' })
              const { resource: storedProcedure } = await container.storedProcedures.create({ id: 'SampleStoredProcedure', body: sampleSP })
              const { resource: result } = await container.storedProcedures.storedProcedure('SampleStoredProcedure').execute()
              console.log(result)
    
        - name: Create and test Trigger
          uses: actions/github-script@v6
          with:
            script: |
              const sampleT = require('Triggers/SampleTrigger.js')
              const { resource: trigger } = await container.triggers.create({ id: 'SampleTrigger', body: sampleT, triggerOperation: 'All', triggerType: 'Pre' })
              const { resource: result } = await container.items.create({ id: '1', name: 'Sample Item' })
              console.log(result)

        - name: Download a single artifact
          uses: actions/download-artifact@v3
          with:
            name: SampleApp
            path: SampleApp

        - name: Deploy to Azure Web App
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ steps.arm_deployment.outputs.webappname }}
            package: SampleApp

  Production:
    name: 'Deployment in Production'
    runs-on: ubuntu-latest
    environment: Production
    needs: QA
    steps:
        - name: Checkout
          uses: actions/checkout@v4

        - uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }} # For production, it is recommended to use a Service Principal with the least privileges possible that only has access to the production environment.

        - name: Provisioning Azure Cosmos DB resource with ARM
          id: arm_deployment
          uses: azure/arm-deploy@v1
          with:
            resourceGroupName: azurecosmosdb-Production-rg
            template: IaC/cosmosdb.json
            parameters: IaC/cosmosdb.Prod-parameters.json
            deploymentMode: 'Incremental'
            
        - name: Create Stored Procedure in Azure Cosmos DB for Production
          uses: actions/github-script@v6
          with:
            script: | 
              npm install @azure/cosmos
              npm install @azure/identity
              const { DefaultAzureCredential } = require("@azure/identity");
              const credential = new DefaultAzureCredential();
              const cosmosClient = new CosmosClient({ 
                  ${{ steps.arm_deployment.outputs.cosmosDBendpoint }}, 
                  aadCredentials: credential
              });
              const sampleSP = require('StoredProcedures/SampleStoredProcedure.js')
              const { database } = await cosmosClient.databases.createIfNotExists({ id: 'SampleDatabase' })
              const { container } = await database.containers.createIfNotExists({ id: 'SampleContainer' })
              const { resource: storedProcedure } = await container.storedProcedures.create({ id: 'SampleStoredProcedure', body: sampleSP })
              const { resource: result } = await container.storedProcedures.storedProcedure('SampleStoredProcedure').execute()
              console.log(result)
      
        - name: Create Trigger in Azure Cosmos DB for Production
          uses: actions/github-script@v6
          with:
            script: |
              const sampleT = require('Triggers/SampleTrigger.js')
              const { resource: trigger } = await container.triggers.create({ id: 'SampleTrigger', body: sampleT, triggerOperation: 'All', triggerType: 'Pre' })
            
        - name: Download a single artifact
          uses: actions/download-artifact@v3
          with:
            name: SampleApp
            path: SampleApp

        - name: Deploy to Azure Web App
          uses: azure/webapps-deploy@v2
          with:
            app-name: ${{ steps.arm_deployment.outputs.webappname }}
            package: SampleApp